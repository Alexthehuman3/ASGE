namespace ASGE {

/** @page changelog Changelog

@tableofcontents

@section changelog-210 v2.1.0
Released 07/11/2021

@subsection changelog-210-changes Enhancements
- Introduction of Unity style time steps [[3aa4fd4]](https://github.com/HuxyUK/ASGE/commit/3aa4fd479558795ca11ab81898ceb6e0d2b964eb)

@subsection changelog-210-bugs Bug Fixes
- Add y spacing in font atlas to prevent sampling issues when scaling

---

@section changelog-202 v2.0.2
Released 01/11/2021

@subsection changelog-202-changes Enhancements
- Scale the game resolution on init, instead of assuming framebuffer dimensions

@subsection changelog-202-changes-misc Misc
- Disable altera warnings for clang-tidy

@subsection changelog-202-bugs Bug Fixes
- Using a custom shader no longer causes an issue when reset to nullptr
- Flip flags now apply correctly to sprites when using custom source rectangles

---

@section changelog-201 v2.0.1
Released 31/10/2021

@subsection changelog-201-changes Enhancements
- Expose read-only camera positional property
- Disable deprecated OpenGL support, fixes mac-build
- Target 10.15 to allow use of C++17 std::filesystem

@subsection changelog-201-changes-misc Misc
- Minor formatting changes
- Upgrade to a non-broken Freetype2 repository
- Working MacOS build

---

@section changelog-200 v2.0.0
Released 18/10/2021

---

@section changelog-200a4 v2.0.0.alpha.4
Released 14/05/2021

@subsection changelog-200a4-changes Enhancements
- Allow UV wrapping mode to be changed for individual textures
- Expose read-only camera positional property

@subsection changelog-200a4-changes-misc Misc
- The default UV wrapping mode is now CLAMP instead of REPEAT
- Renamed EXCLUSIVE_FULLSCREEEN typo to EXCLUSIVE_FULLSCREEN

@subsection changelog-200a4-bugs Bug Fixes
- Using a custom shader no longer causes an issue when reset to nullptr
- Flip flags now apply correctly to sprites when using custom source rectangles

---

@section changelog-200a3 v2.0.0.alpha.3
Released 10/05/2021

@subsection changelog-200a3-changes Enhancements
- Expose screen resolution info to end user
- Resize and reposition viewports when entering fullscreen modes

@subsection changelog-200a3-bugs Bug Fixes
- Camera zoom now works correctly, thanks @olihewi
- NVIDIA rendering under Linux no longer causes artefacts

---

@section changelog-200a2 v2.0.0.alpha.2
Released 23/04/2021

@subsection changelog-200a2-changes Enhancements
- Added CameraView data structure
- Added time-step conversion functions
- Render function now passes GameTime
- Render to texture support implemented
- Support for custom viewports
- Use int16_t consistently for z-ordering

@subsection changelog-200a2-changes-misc Misc
- Bumped supporting libraries
- Fixed MSVC build issues
- Moved to GLAD from GLEW for GL loader
- Renamed headers to .hpp
- Updates are now fixed-steps and renders variable

@subsection changelog-200a2-bugs Bug Fixes
- Alpha channel now works when rendering text
- Fixed camera view issues
- Many small issues resolved due to porting of library to Python
- Sprites will now fallback to the default shader if the text version is currently attached
- Time-steps and frame pacing improvements
- Z-ordering now works correctly

---

@section changelog-200a1 v2.0.0.alpha.1
Released 29/02/2020

@subsection changelog-200a1-changes Enhancements
- Text now proxy's the width and height calls to the underlying font
- float ASGE::Text::getWidth()
- float ASGE::Text::getHeight()
- Removed slow ASGE::DebugPrinter{}
- Added a thread-safe generic logging namespace @see Logging
  This new namespace provides a generic logging factory where
  custom loggers can be added. It comes with a std::cout and
  basic file logger. By default it uses std::cout for logging.
- Added pre-processor definitions that allow different logging levels
- Added Gamepad button mappings to make it easier to locate buttons/axis.
- Updated ASGE predefined colours to utilise Colour structs.
- ASGE::Colour can now construct from three floats instead of just arrays.
- String width and height for a given font @see pxWide and pxHeight
- Delta time in seconds can now be retrieved via GameTime
- Added ability to set the mouse cursor's position
- ASGE::Text class now replaces standard text rendering
- Added helper constants for mapping sprite source rectangles
- FPS limits can now be applied to enable finer control of rendering
- Support for basic MSAA and AF options

@subsubsection changelog-200a1-changes-misc Misc
- Remove unused GamePad Event
- Texture2D dimensions are now floats
- Game setup parameters have been moved to a struct called GameSettings
- The current game settings can be accessed via a static data member on ASGE::Game
- GameTime is no longer passed to the render function, simulations should be done using the update function

@subsubsection changelog-200a1-changes-rendering Rendering
- Complete rewrite of rendering system for modern OGL systems
- Shaders now utilise a RenderQuad data structure which is uploaded in batches
- Persistant mapping of SSBO objects enabled, allowing manual DMA transfer signalling
- Support for Triple buffer SSBO
- Pixelbuffer support
- Textures with out of bounds UV coordinates now repeat instead of clamp
- Implemented proper move support for Quads resulting in large speed gains for sorting

@subsection changelog-200a1-bugs Bug Fixes
- ASGE::Text now sets the Y position instead of the z-order when calling setPositionY
- Various Code Analysis fixes
- Moved Point2D to ASGE namespace
- Flip flags now work correctly
- Fixed issue with sprite sheets and deferred rendering

---

@section changelog-032 v0.3.2
Released 20/02/2019

@subsection changelog-032-changes Enhancements
- GameTime field names have been simplified to delta and elapsed
- ASGE::Game now stores time related delta in eopch data member
- Support for in-engine splash screens

@subsection changelog-032-bugs Bug Fixes
- Fixed build warning
- Added debug message when performing monolithic builds

---

@section changelog-031 v0.3.1
Released 08/01/2019

@subsection changelog-031-changes Enhancements
- Updated PhysFS to latest version 3.01

@subsection changelog-031-bugs Bug Fixes
- Fixes issue with PhysFS and latest version of Crapindows 10 and its API changes

---

@section changelog-030 v0.3.0
Released 12/12/2018

@subsection changelog-030-changes Enhancements
- Implemented a custom generic value type based on std::any.
- Added a new shader namespace.
- Added user support for custom pixel shaders.
- Implemented a simple shader cache to store user added shaders.
- Uniforms are accessed through the use of _UniformB.
- Bumped OGL to 4.1.
- See ASGE::Shader and ASGE::SHADER_LIB for more details.

@subsection changelog-030-bugs Bug Fixes
- Fixed some compilation errors in specific configurations.

---

@section changelog-024 v0.2.4
Released 12/11/2018

@subsection changelog-024-changes Enhancements
- Added ability to change the directory for writing.
- It is now possible to create subdirectories inside the root of the write dir.
- Basic types now supported by the template append function for IOBuffers.
- String specialisation has been added to support appending when using IOBuffers.
- Added string for game name to ASGE::Game. Used for default file storage and window titles.
- Default write directory in windows is %APPDATA%\\ASGE\\%game_name%
- Support to mount additional user directories.
- Support to enumerate a directory.
- Support to delete a file.
- See ASGE::FILEIO for more details.

@subsection changelog-024-bugs Bug Fixes
- Buffer size was not being increased when data was appended

---

@section changelog-023 v0.2.3
Released 12/11/2018

@subsection changelog-023-changes Enhancements
- Added utility struct to represent a point in 2D space: Point2D
- Added utility struct to represent the 4 bounds of a rectangle i.e a sprite: SpriteBounds
- New function to retrieve local bounds of a sprite
- New function to retrieve global bounds of a sprite

---

@section changelog-022 v0.2.2
Released 16/10/2018

@subsection changelog-022-hotfix Hotfix
- Reworked FileIO to remove dependency on PhysFS headers

---

@section changelog-021 v0.2.1
Released 10/10/2018

@subsection changelog-021-changes Enhancements
- Support monolithic builds that integrate static into single shared library
- Engine now also searches game.dat for resources

@subsection changelog-021-bugs Bug Fixes
- Fixed build issues for Linux 

---

@section changelog-020 v0.2.0
Released 14/09/2018

@subsection changelog-020-changes Enhancements
- Added PhysFS and PhysFS++ 
- New File class to allow easy management of data
- New DebugPrinter (a thread safe console output class)
- Moved demo code to use FileIO 
- Dependencies have been reworked for builds
- Added butler
- Added 7zip for windows
- Renamed default resources folder to data

@subsection changelog-020-bugs Bug Fixes
- Fixed #29: Flip flags for sprites were not initialised correctly.
- Some minor code tidy (static analysis)
- Fixed build issue with missing include

---

@section changelog-016 v0.1.6
Released 28/06/2018

@subsection changelog-016-changes Enhancements
- Moved build system to CMake
- Build support for Linux/OSX/Windows added
- Removed VS projects and solutions
- Upgraded external libraries 

---

@section changelog-015a v0.1.5a
Released 03/04/2018

@subsection changelog-015a-hotfix Hotfix
- Ensure mouse co-ordinates are correctly gathered when sending the click event

---

@section changelog-015 v0.1.5
Released 14/03/2018

@subsection changelog-015-changes Enhancements
- Added mouse button constants. See ASGE::MOUSE

@subsection changelog-015-bugs Bug Fixes
- Mouse co-ordinates will now always be unprojected back into orthogonal space
- Fixed issue with subpixel positions causing texel offsets by rounding up vertex positions

---

@section changelog-014 v0.1.4
Released 07/03/2018

@subsection changelog-014-bugs Bug Fixes
- Fixed an issue with the wrong UV mapping when using source rectangles for rendering sprites

---

@section changelog-013 v0.1.3
Released 15/02/2018

@subsection changelog-013-changes Enhancements
- Added the ability to hide the mouse cursor
- Added the ability to lock the mouse cursor to the window

---

@section changelog-012 v0.1.2
Released 18/12/2017

@subsection changelog-012-bugs Bug Fixes
- Resolved issue with string destruction after storing the texture in the cache  

---

@section changelog-011 v0.1.1
Released 14/09/2018

@subsection changelog-011-changes Enhancements
@subsubsection changelog-011-changes-sprites Sprites
- Sprites now use appropriate getters and setters
- Sprites can now be flipped in the x or y axis. 
- Sprites can now use a source rectangle to make use of sprite sheets
- Sprites now support for opacity using the alpha channel

@subsubsection changelog-011-changes-render Render modes
- Batching modes for texture, front to back and back to front mode added
- Borderless window support added
- Deferred rendering support added
- Fullscreen support added
- Implemented a new sprite batch class that manages rendering of both text and sprites
- Rendering the FPS also shows some additional debug info
- Replaced dynamic text buffers with a larger static buffer
- Replaced sprite shader with an instancing version

@subsubsection changelog-011-changes-docs Documentation
- Doxygen comments have been added to all public facing API classes and functions.

@subsubsection changelog-011-changes-misc Misc
- Added a new demo browser to the game engine
- Huge performance increases when rendering large numbers of sprites
- Huge performance increases when rendering large amounts of text
- Ordering renders by their texture and colour hugely benefits the sprite batch system

@subsection changelog-011-bugs Bug Fixes
- Fixed issue when applying a scale to rotated sprites
- Fixed issue where it was not possible to obtain the sprite's dimensions
- Fixed issue where the texture cache would not empty when the game exits but the textures would be unloaded from GPU
- Fixed issue where FPS counter could be rendered behind other sprites 

@subsection changelog-011-upgrades Upgrades
- Updated GLEW to 2.1.0

*/

}
